# Cursor Rules - Prompt Templates (詳細版)
# Copyright (c) 2025 Kentaro Kitagawa
# MIT License - https://opensource.org/licenses/MIT

## [PROMPT] DEF-A統合プロンプトテンプレート（詳細版）

### 基本プロンプト構造
```markdown
# Cursor プロンプト - DEF-A統合指示

## [CONTEXT] 開発状況
- **プロジェクト**: [プロジェクト名・特性]
- **開発段階**: [要件定義/設計/実装/テスト/運用]
- **緊急度**: [緊急/通常/学習]
- **チーム規模**: [個人/小規模/大規模]

## [REQUEST] 具体的要求
[具体的な質問・要求内容]

## [DEF-A] 思考フロー指定
- **適用段階**: [Define/Explore/Formulate/Act/Assess または 複数選択]
- **認知スタイル**: [Systems思考重視/Empathy共感重視/状況判断]
- **複雑性レベル**: [簡潔/標準/詳細]

## [RULES] 適用ルール
- **主要ルール**: [frontend/backend/testing/core]
- **品質基準**: [三方よし/丁度いい/持続可能性]
- **出力形式**: [コード/設計書/説明/チュートリアル]
```

### 状況別プロンプト例

#### 1. 戦略設計質問（完全DEF-A適用）
```markdown
# React アプリのアーキテクチャ設計戦略

## [CONTEXT] 開発状況
- **プロジェクト**: 中規模SaaSアプリケーション
- **開発段階**: アーキテクチャ設計
- **緊急度**: 通常
- **チーム規模**: 5名

## [REQUEST] 具体的要求
スケーラブルで保守性の高いReactアプリケーションのアーキテクチャを設計したい。
状態管理、コンポーネント設計、ディレクトリ構造を統合的に検討したい。

## [DEF-A] 思考フロー指定
- **適用段階**: Define → Explore → Formulate → Act → Assess（完全適用）
- **認知スタイル**: Systems思考重視（システム全体最適化）
- **複雑性レベル**: 詳細

## [RULES] 適用ルール
- **主要ルール**: frontend_rules.cursorrules
- **品質基準**: 三方よし（開発者・ユーザー・システム全体）
- **出力形式**: 設計書 + 実装ガイド
```

#### 2. 技術実装質問（部分DEF-A適用）
```markdown
# TypeScript 型安全なAPIクライアント実装

## [CONTEXT] 開発状況
- **プロジェクト**: 既存Reactアプリケーション
- **開発段階**: 機能追加実装
- **緊急度**: 通常
- **チーム規模**: 個人

## [REQUEST] 具体的要求
REST APIとの通信を行う型安全なAPIクライアントを実装したい。
エラーハンドリングとローディング状態管理も含めたい。

## [DEF-A] 思考フロー指定
- **適用段階**: Formulate → Act → Assess（実装重視）
- **認知スタイル**: Systems思考重視（型安全性・構造化）
- **複雑性レベル**: 標準

## [RULES] 適用ルール
- **主要ルール**: frontend_rules.cursorrules
- **品質基準**: 丁度いい（過不足のない実装）
- **出力形式**: 実装コード + 使用例
```

#### 3. 緊急バグ修正（最小DEF-A適用）
```markdown
# 本番環境 React アプリクラッシュ緊急修正

## [CONTEXT] 開発状況
- **プロジェクト**: 本番稼働中のWebアプリ
- **開発段階**: 緊急バグ修正
- **緊急度**: 緊急
- **チーム規模**: 小規模

## [REQUEST] 具体的要求
ユーザーの特定操作でアプリがクラッシュしている。
エラーログ: [エラー内容]
最小限の修正で素早く解決したい。

## [DEF-A] 思考フロー指定
- **適用段階**: Act（緊急対応実装のみ）
- **認知スタイル**: Systems思考重視（効率的・論理的解決）
- **複雑性レベル**: 簡潔

## [RULES] 適用ルール
- **主要ルール**: frontend_rules.cursorrules
- **品質基準**: 最小限の安全な修正
- **出力形式**: 修正コード + 緊急デプロイ手順
```

#### 4. 学習・理解質問（Explore重視適用）
```markdown
# TDD開発手法の学習・理解

## [CONTEXT] 開発状況
- **プロジェクト**: 個人学習・技術習得
- **開発段階**: 学習・理解
- **緊急度**: 低
- **チーム規模**: 個人

## [REQUEST] 具体的要求
TDD（テスト駆動開発）の基本的な考え方と実践方法を段階的に学習したい。
Reactコンポーネントでの具体例も含めて理解したい。

## [DEF-A] 思考フロー指定
- **適用段階**: Explore → Act（学習・実践）
- **認知スタイル**: Empathy共感重視（段階的説明・学習支援）
- **複雑性レベル**: 詳細

## [RULES] 適用ルール
- **主要ルール**: testing_rules.cursorrules
- **品質基準**: 段階的理解・実践しやすさ
- **出力形式**: チュートリアル + 実習課題
```

### 高度なプロンプトパターン

#### 5. 複合技術領域質問（マルチルール適用）
```markdown
# フルスタック認証システム設計・実装

## [CONTEXT] 開発状況
- **プロジェクト**: 新規SaaSアプリケーション
- **開発段階**: 要件定義 → 設計 → 実装
- **緊急度**: 通常
- **チーム規模**: 3名

## [REQUEST] 具体的要求
JWT認証を使ったセキュアな認証システムをフルスタックで実装したい。
フロントエンド（React）とバックエンド（Node.js）の連携も含めて。

## [DEF-A] 思考フロー指定
- **適用段階**: Define → Explore → Formulate → Act（設計→実装）
- **認知スタイル**: Systems思考重視（セキュリティ・システム統合）
- **複雑性レベル**: 詳細

## [RULES] 適用ルール
- **主要ルール**: backend_rules.cursorrules（認証システムはバックエンド主体）
- **補助ルール**: frontend_rules.cursorrules + testing_rules.cursorrules
- **品質基準**: 三方よし + セキュリティ重視
- **出力形式**: システム設計書 + 段階的実装ガイド + テスト戦略
```

#### 6. プロセス改善質問（Assess重視適用）
```markdown
# チーム開発プロセス品質向上

## [CONTEXT] 開発状況
- **プロジェクト**: 既存チーム開発プロセス
- **開発段階**: プロセス評価・改善
- **緊急度**: 通常
- **チーム規模**: 8名

## [REQUEST] 具体的要求
現在のチーム開発プロセス（コードレビュー、テスト、デプロイ）を評価し、
品質向上と効率化を両立する改善案を検討したい。

## [DEF-A] 思考フロー指定
- **適用段階**: Assess → Explore → Formulate（評価→改善策検討→計画）
- **認知スタイル**: Systems思考重視（チーム全体最適化）
- **複雑性レベル**: 詳細

## [RULES] 適用ルール
- **主要ルール**: testing_rules.cursorrules（品質保証プロセス）
- **補助ルール**: core_rules.cursorrules
- **品質基準**: 持続可能性（チーム長期的成長）
- **出力形式**: 現状分析 + 改善計画 + 導入ロードマップ
```

### メタプロンプト（プロンプト生成プロンプト）
```markdown
# Cursor プロンプト自動生成

以下の情報から、最適なCursorプロンプトを生成してください：

## 基本情報
- **質問内容**: [具体的な質問・要求]
- **技術領域**: [フロントエンド/バックエンド/フルスタック/テスト]
- **プロジェクト特性**: [新規/既存/個人/チーム]
- **緊急度**: [緊急/通常/学習]

## 自動判定項目
1. **DEF-A段階の最適選択**
2. **認知スタイルの適切な判断**
3. **複雑性レベルの調整**
4. **適用ルールの選択**
5. **出力形式の最適化**

→ 上記テンプレートに従って、完全なプロンプトを生成してください。
```

### 最適化版プロンプトテンプレート

#### 基本プロンプト構造（最適化版）
```markdown
# Cursor プロンプト - DEF-A統合指示（最適化版）

## [CONTEXT] 開発状況
- **プロジェクト**: [プロジェクト名・特性]
- **開発段階**: [要件定義/設計/実装/テスト/運用]
- **緊急度**: [緊急/通常/学習]
- **チーム規模**: [個人/小規模/大規模]
- **プロジェクト特性**: [新規/既存/個人/チーム]

## [REQUEST] 具体的要求
[具体的な質問・要求内容]

## [DEF-A] 思考フロー指定
- **適用段階**: [Define/Explore/Formulate/Act/Assess または 複数選択]
- **適用戦略**: [完全適用/部分適用/最小適用/学習支援適用]
- **認知スタイル**: [Systems思考重視/Empathy共感重視/状況判断]
- **複雑性レベル**: [簡潔/標準/詳細]

## [RULES] 適用ルール
- **主要ルール**: [frontend/backend/testing/core]
- **補助ルール**: [該当する場合]
- **品質基準**: [三方よし/丁度いい/持続可能性]
- **出力形式**: [コード/設計書/説明/チュートリアル]
- **部分適用理由**: [効率性/緊急度/学習支援/戦略的重要性]
```

#### 状況別プロンプト例（最適化版）

##### 1. 戦略設計質問（完全DEF-A適用）
```markdown
# React アプリのアーキテクチャ設計戦略

## [CONTEXT] 開発状況
- **プロジェクト**: 中規模SaaSアプリケーション
- **開発段階**: アーキテクチャ設計
- **緊急度**: 通常
- **チーム規模**: 5名
- **プロジェクト特性**: 新規・チーム開発

## [REQUEST] 具体的要求
スケーラブルで保守性の高いReactアプリケーションのアーキテクチャを設計したい。
状態管理、コンポーネント設計、ディレクトリ構造を統合的に検討したい。

## [DEF-A] 思考フロー指定
- **適用段階**: Define → Explore → Formulate → Act → Assess（完全適用）
- **適用戦略**: 完全適用（戦略的重要性）
- **認知スタイル**: Systems思考重視（システム全体最適化）
- **複雑性レベル**: 詳細

## [RULES] 適用ルール
- **主要ルール**: frontend_rules.cursorrules
- **補助ルール**: core_rules.cursorrules
- **品質基準**: 三方よし（開発者・ユーザー・システム全体）
- **出力形式**: 設計書 + 実装ガイド
- **部分適用理由**: 戦略的重要性（完全分析が必要）
```

##### 2. 技術実装質問（部分DEF-A適用）
```markdown
# TypeScript 型安全なAPIクライアント実装

## [CONTEXT] 開発状況
- **プロジェクト**: 既存Reactアプリケーション
- **開発段階**: 機能追加実装
- **緊急度**: 通常
- **チーム規模**: 個人
- **プロジェクト特性**: 既存・個人開発

## [REQUEST] 具体的要求
REST APIとの通信を行う型安全なAPIクライアントを実装したい。
エラーハンドリングとローディング状態管理も含めたい。

## [DEF-A] 思考フロー指定
- **適用段階**: Formulate → Act → Assess（実装重視）
- **適用戦略**: 部分適用（実装重視）
- **認知スタイル**: Systems思考重視（型安全性・構造化）
- **複雑性レベル**: 標準

## [RULES] 適用ルール
- **主要ルール**: frontend_rules.cursorrules
- **補助ルール**: core_rules.cursorrules
- **品質基準**: 丁度いい（過不足のない実装）
- **出力形式**: 実装コード + 使用例
- **部分適用理由**: 効率性（実装に焦点）
```

##### 3. 緊急バグ修正（最小DEF-A適用）
```markdown
# 本番環境 React アプリクラッシュ緊急修正

## [CONTEXT] 開発状況
- **プロジェクト**: 本番稼働中のWebアプリ
- **開発段階**: 緊急バグ修正
- **緊急度**: 緊急
- **チーム規模**: 小規模
- **プロジェクト特性**: 既存・本番環境

## [REQUEST] 具体的要求
ユーザーの特定操作でアプリがクラッシュしている。
エラーログ: [エラー内容]
最小限の修正で素早く解決したい。

## [DEF-A] 思考フロー指定
- **適用段階**: Act（緊急対応実装のみ）
- **適用戦略**: 最小適用（緊急対応）
- **認知スタイル**: Systems思考重視（効率的・論理的解決）
- **複雑性レベル**: 簡潔

## [RULES] 適用ルール
- **主要ルール**: frontend_rules.cursorrules
- **品質基準**: 最小限の安全な修正
- **出力形式**: 修正コード + 緊急デプロイ手順
- **部分適用理由**: 緊急度（応答速度最優先）
```

##### 4. 学習・理解質問（学習支援適用）
```markdown
# TDD開発手法の学習・理解

## [CONTEXT] 開発状況
- **プロジェクト**: 個人学習・技術習得
- **開発段階**: 学習・理解
- **緊急度**: 低
- **チーム規模**: 個人
- **プロジェクト特性**: 新規・個人学習

## [REQUEST] 具体的要求
TDD（テスト駆動開発）の基本的な考え方と実践方法を段階的に学習したい。
Reactコンポーネントでの具体例も含めて理解したい。

## [DEF-A] 思考フロー指定
- **適用段階**: Explore → Act（学習・実践）
- **適用戦略**: 学習支援適用（教育・理解）
- **認知スタイル**: Empathy共感重視（段階的説明・学習支援）
- **複雑性レベル**: 詳細

## [RULES] 適用ルール
- **主要ルール**: testing_rules.cursorrules
- **補助ルール**: core_rules.cursorrules
- **品質基準**: 段階的理解・実践しやすさ
- **出力形式**: チュートリアル + 実習課題
- **部分適用理由**: 学習支援（段階的理解重視）
```

### 高度なプロンプトパターン（最適化版）

#### 5. 複合技術領域質問（マルチルール適用）
```markdown
# フルスタック認証システム設計・実装

## [CONTEXT] 開発状況
- **プロジェクト**: 新規SaaSアプリケーション
- **開発段階**: 要件定義 → 設計 → 実装
- **緊急度**: 通常
- **チーム規模**: 3名
- **プロジェクト特性**: 新規・チーム開発

## [REQUEST] 具体的要求
JWT認証を使ったセキュアな認証システムをフルスタックで実装したい。
フロントエンド（React）とバックエンド（Node.js）の連携も含めて。

## [DEF-A] 思考フロー指定
- **適用段階**: Formulate → Act（設計統合→実装）
- **適用戦略**: 部分適用（実装重視）
- **認知スタイル**: Systems思考重視（セキュリティ・システム統合）
- **複雑性レベル**: 詳細

## [RULES] 適用ルール
- **主要ルール**: backend_rules.cursorrules（認証システムはバックエンド主体）
- **補助ルール**: frontend_rules.cursorrules + testing_rules.cursorrules
- **品質基準**: 三方よし + セキュリティ重視
- **出力形式**: システム設計書 + 段階的実装ガイド + テスト戦略
- **部分適用理由**: 効率性（実装に焦点、複雑性管理）
```

#### 6. プロセス改善質問（Assess重視適用）
```markdown
# チーム開発プロセス品質向上

## [CONTEXT] 開発状況
- **プロジェクト**: 既存チーム開発プロセス
- **開発段階**: プロセス評価・改善
- **緊急度**: 通常
- **チーム規模**: 8名
- **プロジェクト特性**: 既存・チーム開発

## [REQUEST] 具体的要求
現在のチーム開発プロセス（コードレビュー、テスト、デプロイ）を評価し、
品質向上と効率化を両立する改善案を検討したい。

## [DEF-A] 思考フロー指定
- **適用段階**: Assess → Explore → Formulate（評価→改善策検討→計画）
- **適用戦略**: 部分適用（プロセス改善重視）
- **認知スタイル**: Systems思考重視（チーム全体最適化）
- **複雑性レベル**: 詳細

## [RULES] 適用ルール
- **主要ルール**: testing_rules.cursorrules（品質保証プロセス）
- **補助ルール**: core_rules.cursorrules
- **品質基準**: 持続可能性（チーム長期的成長）
- **出力形式**: 現状分析 + 改善計画 + 導入ロードマップ
- **部分適用理由**: プロセス改善重視（持続可能性）
```

### メタプロンプト（プロンプト生成プロンプト・最適化版）
```markdown
# Cursor プロンプト自動生成（最適化版）

以下の情報から、最適なCursorプロンプトを生成してください：

## 基本情報
- **質問内容**: [具体的な質問・要求]
- **技術領域**: [フロントエンド/バックエンド/フルスタック/テスト]
- **プロジェクト特性**: [新規/既存/個人/チーム]
- **緊急度**: [緊急/通常/学習]
- **チーム規模**: [個人/小規模/大規模]

## 自動判定項目
1. **DEF-A段階の最適選択**
2. **適用戦略の判断（完全/部分/最小/学習支援）**
3. **認知スタイルの適切な判断**
4. **複雑性レベルの調整**
5. **適用ルールの選択**
6. **出力形式の最適化**
7. **部分適用理由の明確化**

## 最適化考慮事項
- **効率性**: 応答速度と品質のバランス
- **認知負荷**: 質問内容に応じた適切な複雑性
- **実用性**: 即座実行可能な提案
- **学習効果**: 段階的理解・継続的成長

→ 上記テンプレートに従って、完全なプロンプトを生成してください。
``` 