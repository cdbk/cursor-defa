# Cursor Rules - Rule Selector (DEF-A統合最適化版)
# Copyright (c) 2025 Kentaro Kitagawa
# MIT License - https://opensource.org/licenses/MIT

## [SELECTOR] 質問内容に応じたルール選択システム（DEF-A統合最適化版）

### DEF-A質問分析フレームワーク（コンパクト版）

#### DEF-A段階判定キーワード（部分適用対応）
```
🎯 Define段階: "要件", "問題", "課題", "理解", "何を", "なぜ", "戦略", "設計"
🔍 Explore段階: "比較", "選択", "どちらが", "検討", "学習", "理解", "段階的"
✨ Formulate段階: "設計", "構造", "統合", "最適化", "実装", "開発", "型安全"
📝 Act/Apply段階: "実装", "コーディング", "作成", "実行", "緊急", "修正", "バグ"
📈 Assess/Adjust段階: "評価", "測定", "分析", "改善", "最適化", "プロセス"
```

#### 認知スタイル判定キーワード（コンパクト版）
```
🧠 Systems Mode: "システム", "アーキテクチャ", "設計", "戦略", "複雑", "型安全", "効率的"
🌸 Empathy Mode: "ユーザー", "体験", "学習", "教育", "チーム", "段階的", "実用的"
```

#### 技術領域判定キーワード（コンパクト版）
```
フロントエンド: React, Vue, Angular, TypeScript, JavaScript, コンポーネント, UI, UX
バックエンド: API, サーバー, データベース, Node.js, Python, 認証, セキュリティ
テスト: テスト, TDD, BDD, Jest, Vitest, 品質保証, レビュー, CI/CD
全般・設計: 設計, アーキテクチャ, パターン, 最適化, セキュリティ, フルスタック
```

#### 質問タイプ判定（コンパクト版）
```
実装・コーディング: "実装", "コード", "作成", "開発", "エラー", "バグ", "修正"
設計・アーキテクチャ: "設計", "アーキテクチャ", "構造", "パターン", "選択", "比較"
テスト・品質: "テスト", "品質", "検証", "TDD", "BDD", "レビュー", "改善"
調査・学習: "調べる", "調査", "学習", "比較", "段階的", "理解", "実践"
緊急対応: "緊急", "本番", "クラッシュ", "エラー", "修正", "最小限", "素早く"
```

### DEF-A統合ルール選択ロジック（コンパクト版）

#### 優先度付きルール適用
```
1. DEF-A段階判定 → 思考フロー段階決定（完全/部分/最小適用）
2. 認知スタイル判定 → 応答スタイル決定（Systems/Empathy）
3. 技術領域判定 → 専門ルールファイル選択
4. 質問タイプ判定 → 適用レベル決定
5. 緊急度判定 → 複雑性調整
6. プロジェクト特性 → カスタマイズ適用
7. 部分適用戦略 → 効率性最適化
```

#### DEF-A段階別ルール適用マトリックス（コンパクト版）
```
DEF-A段階 → 適用ルール・アプローチ・複雑性
├── 🎯 Define → 要件分析・問題定義・文脈理解（完全適用時のみ）
├── 🔍 Explore → 多視点分析・技術選択・アプローチ検討（学習支援時重視）
├── ✨ Formulate → 設計統合・最適化・実装計画（実装重視時）
├── 📝 Act/Apply → 実装・コーディング・統合（緊急対応時最小化）
└── 📈 Assess/Adjust → 評価・改善・最適化（プロセス改善時重視）
```

#### 認知スタイル別応答アプローチ（コンパクト版）
```
認知スタイル → 応答アプローチ → 部分適用パターン
├── 🧠 Systems → 構造化・論理的・全体最適化重視
│   ├── 緊急対応: 効率的・論理的解決（簡潔版）
│   ├── 実装支援: 構造化・型安全性重視
│   └── 設計統合: 全体最適化・拡張性考慮
└── 🌸 Empathy → 段階的・実用的・感情共鳴重視
    ├── 学習支援: 段階的説明・実践例重視
    ├── ユーザー体験: 使いやすさ・親しみやすさ重視
    └── チーム協働: 共有・理解促進重視
```

#### ルールファイル選択マトリックス（コンパクト版）
```
質問内容 → 適用ルール → 部分適用戦略
├── フロントエンド技術 → frontend_rules.cursorrules
│   ├── 実装重視: Formulate → Act → Assess
│   ├── 学習支援: Explore → Act
│   └── 緊急対応: Act（最小限）
├── バックエンド技術 → backend_rules.cursorrules
│   ├── システム設計: Define → Explore → Formulate
│   ├── API実装: Formulate → Act → Assess
│   └── 緊急修正: Act（最小限）
├── テスト・品質 → testing_rules.cursorrules
│   ├── プロセス改善: Assess → Explore → Formulate
│   ├── TDD/BDD学習: Explore → Act
│   └── 品質評価: Assess
└── 全般・設計 → core_rules.cursorrules
    ├── 戦略設計: 完全DEF-A適用
    ├── 実装支援: 部分DEF-A適用
    └── 緊急対応: 最小DEF-A適用
```

### DEF-A統合動的ルール適用システム（コンパクト版）

#### 質問分析プロセス（コンパクト版）
```
🔍 [DEF-A質問分析] 以下の観点で質問を分析します：
1. DEF-A段階: [Define/Explore/Formulate/Act/Assess]
2. 適用戦略: [完全適用/部分適用/最小適用]
3. 認知スタイル: [Systems/Empathy]
4. 技術領域: [フロントエンド/バックエンド/テスト/全般]
5. 質問タイプ: [実装/設計/テスト/調査/緊急対応]
6. 緊急度: [緊急/通常/学習]
7. 複雑性: [高/中/低]
8. プロジェクト特性: [個人/チーム/新規/既存]
→ 適用ルール: [選択されたルールファイル]
→ 応答スタイル: [Systems/Empathy]
→ 部分適用戦略: [効率性最適化]
```

#### DEF-A統合ルール適用ログ（コンパクト版）
```
📋 [DEF-A統合ルール適用] 以下のルールを適用します：
- DEF-A段階: [Define/Explore/Formulate/Act/Assess]
- 適用戦略: [完全適用/部分適用/最小適用]
- 認知スタイル: [Systems/Empathy]
- 主要ルール: [frontend_rules.cursorrules]
- 補助ルール: [core_rules.cursorrules]
- 適用レベル: [基本/詳細/戦略]
- 複雑性調整: [簡潔/標準/詳細]
- 品質原則: [三方よし/丁度いい/持続可能性]
- 部分適用理由: [効率性/緊急度/学習支援]
- 最適化戦略: [認知負荷軽減/応答速度向上/品質維持]
```

### DEF-A統合状況別ルール選択例（コンパクト版）

#### システム設計質問（Systems Mode + 完全DEF-A適用）
```
質問: "マイクロサービスアーキテクチャの設計要件を分析したい"
分析:
- DEF-A段階: Define (要件分析・問題定義)
- 適用戦略: 完全適用 (戦略的質問)
- 認知スタイル: Systems (システム思考・全体最適化)
- 技術領域: バックエンド (アーキテクチャ)
- 質問タイプ: 設計・アーキテクチャ
- 緊急度: 通常
- 複雑性: 高
- プロジェクト特性: チーム開発

適用ルール:
- 主要: backend_rules.cursorrules
- 補助: core_rules.cursorrules
- 応答スタイル: Systems (構造化・論理的)
- DEF-A段階: Define → Explore → Formulate → Act → Assess
- 部分適用戦略: 完全適用（戦略的重要性）
```

#### 技術実装質問（Systems Mode + 部分DEF-A適用）
```
質問: "TypeScriptで型安全なAPIクライアントを実装したい"
分析:
- DEF-A段階: Act/Apply (実装・実行)
- 適用戦略: 部分適用 (実装重視)
- 認知スタイル: Systems (構造化・型安全性)
- 技術領域: フロントエンド (TypeScript)
- 質問タイプ: 実装・コーディング
- 緊急度: 通常
- 複雑性: 中
- プロジェクト特性: 個人開発

適用ルール:
- 主要: frontend_rules.cursorrules
- 補助: core_rules.cursorrules
- 応答スタイル: Systems (構造化・論理的)
- DEF-A段階: Formulate → Act → Assess
- 部分適用戦略: 実装重視（効率性最適化）
```

#### 緊急バグ修正（Systems Mode + 最小DEF-A適用）
```
質問: "本番環境でエラーが発生している"
分析:
- DEF-A段階: Act/Apply (緊急対応・修正)
- 適用戦略: 最小適用 (緊急対応)
- 認知スタイル: Systems (効率的・論理的)
- 技術領域: 該当技術領域
- 質問タイプ: 緊急対応
- 緊急度: 緊急
- 複雑性: 低
- プロジェクト特性: 本番環境

適用ルール:
- 主要: 該当技術領域のルール
- 応答スタイル: Systems (効率的・論理的)
- DEF-A段階: Act（緊急対応実装のみ）
- 部分適用戦略: 最小適用（応答速度最優先）
- 複雑性: 簡潔（最小限の修正）
```

#### 学習・教育質問（Empathy Mode + 学習支援適用）
```
質問: "TDDの基本的な考え方を段階的に学びたい"
分析:
- DEF-A段階: Explore (学習・理解)
- 適用戦略: 学習支援適用 (教育・理解)
- 認知スタイル: Empathy (段階的説明・学習支援)
- 技術領域: テスト (TDD)
- 質問タイプ: 学習・教育
- 緊急度: 低
- 複雑性: 低
- プロジェクト特性: 個人学習

適用ルール:
- 主要: testing_rules.cursorrules
- 補助: core_rules.cursorrules
- 応答スタイル: Empathy (段階的・温かみのある)
- DEF-A段階: Explore → Act（学習・実践）
- 部分適用戦略: 学習支援（段階的理解重視）
```

### DEF-A統合複合質問への対応（コンパクト版）

#### フルスタック開発質問（Systems Mode + 部分DEF-A適用）
```
質問: "ユーザー認証システムをフルスタックで設計・実装したい"
分析:
- DEF-A段階: Formulate (設計統合・実装計画)
- 適用戦略: 部分適用 (実装重視)
- 認知スタイル: Systems (システム思考・全体最適化)
- 技術領域: フロントエンド + バックエンド
- 質問タイプ: 設計・実装
- 緊急度: 通常
- 複雑性: 高
- プロジェクト特性: チーム開発

適用ルール:
- 主要: backend_rules.cursorrules (認証システムはバックエンド中心)
- 補助: frontend_rules.cursorrules + core_rules.cursorrules
- 応答スタイル: Systems (構造化・論理的)
- DEF-A段階: Formulate → Act（統合・実装）
- 部分適用戦略: 実装重視（効率性と品質のバランス）
```

#### 品質保証質問（Systems Mode + Assess重視適用）
```
質問: "プロジェクト全体の品質保証プロセスを評価・改善したい"
分析:
- DEF-A段階: Assess/Adjust (評価・改善)
- 適用戦略: 部分適用 (プロセス改善重視)
- 認知スタイル: Systems (システム思考・全体最適化)
- 技術領域: 全般 (品質保証)
- 質問タイプ: 評価・改善
- 緊急度: 通常
- 複雑性: 高
- プロジェクト特性: チーム開発

適用ルール:
- 主要: testing_rules.cursorrules
- 補助: core_rules.cursorrules
- 応答スタイル: Systems (構造化・論理的)
- DEF-A段階: Assess → Explore → Formulate（評価→改善策検討→計画）
- 部分適用戦略: プロセス改善重視（持続可能性）
```

### DEF-A統合緊急度による調整（コンパクト版）

#### 緊急バグ修正（Systems Mode + 最小DEF-A適用）
```
質問: "本番環境でエラーが発生している"
分析:
- DEF-A段階: Act/Apply (緊急対応・修正)
- 適用戦略: 最小適用 (緊急対応)
- 認知スタイル: Systems (効率的・論理的)
- 緊急度: 緊急
- 複雑性調整: 簡潔

適用ルール:
- 主要: 該当技術領域のルール
- 応答スタイル: Systems (効率的・論理的)
- 複雑性: 簡潔 (最小限の修正)
- 応答速度: 最優先
- 部分適用戦略: 最小適用（認知負荷軽減）
```

#### 学習・調査（Empathy Mode + 学習支援適用）
```
質問: "最新のフロントエンド技術を段階的に学習したい"
分析:
- DEF-A段階: Explore (学習・理解)
- 適用戦略: 学習支援適用 (教育・理解)
- 認知スタイル: Empathy (段階的・学習支援)
- 緊急度: 低
- 複雑性調整: 詳細

適用ルール:
- 主要: frontend_rules.cursorrules
- 応答スタイル: Empathy (段階的・温かみのある)
- 複雑性: 詳細 (包括的説明)
- 学習支援: 最優先
- 部分適用戦略: 学習支援（段階的理解重視）
```

### DEF-A統合プロジェクト特性の考慮（コンパクト版）

#### 個人開発プロジェクト
```
特性: 個人開発、学習目的
DEF-A調整:
- Define: 個人の学習目標・技術レベルに焦点
- Explore: 個人の技術レベルに合わせた選択肢
- Formulate: 個人で管理可能な規模
- Act/Apply: 個人のペースに合わせた実装
- Assess/Adjust: 個人の成長に焦点

認知スタイル調整:
- Empathy: 学習支援・段階的説明重視

部分適用戦略:
- 学習支援適用: 段階的理解・実践重視
- 実装重視: 個人レベルに適した複雑性
```

#### チーム開発プロジェクト
```
特性: チーム開発、本番環境
DEF-A調整:
- Define: チーム全体の要件・制約を考慮
- Explore: チームの技術レベル・経験を考慮
- Formulate: チーム協働を考慮した設計
- Act/Apply: チーム開発プロセスに適合
- Assess/Adjust: チーム全体の品質・成長

認知スタイル調整:
- Systems: チーム全体の最適化・構造化重視

部分適用戦略:
- 完全適用: 戦略的重要性の高い質問
- 部分適用: 日常的な技術質問
- 最小適用: 緊急対応・バグ修正
```

### DEF-A統合ルール適用の最適化（コンパクト版）

#### 応答速度の最適化
- **DEF-A段階判定**: 迅速な段階特定・部分適用選択
- **認知スタイル選択**: 効率的な応答スタイル決定
- **質問分析**: 迅速なキーワード判定・緊急度判定
- **ルール選択**: 最小限のルール適用・効率性重視
- **応答生成**: 効率的な情報提供・複雑性調整

#### 品質の最適化
- **DEF-A段階適用**: 適切な思考フロー段階・部分適用戦略
- **認知スタイル統合**: 質問内容に最適化された応答
- **適切なルール選択**: 質問内容に最適化・マルチルール対応
- **包括的な考慮**: 関連技術の統合・プロジェクト特性考慮
- **実用性重視**: 即座実行可能な提案・段階的実装

#### 継続的改善
- **DEF-A段階効果測定**: 各段階の適用効果評価・部分適用効果
- **認知スタイル効果測定**: 応答スタイルの効果評価・最適化
- **使用頻度分析**: よく使われるルールの特定・部分適用パターン
- **効果測定**: ルール適用の効果評価・効率性測定
- **ルール更新**: 新しい技術・DEF-Aモデルへの対応・最適化

## [STRATEGY] DEF-A部分適用の戦略的価値（コンパクト版）

### 効率性と品質の最適バランス
- **実用性重視**: 過度な複雑性を避けた実践的活用
- **文脈適応**: 質問・プロジェクト特性に応じた適切な段階選択
- **協働最適化**: 人間-AI分業における最適な役割分担
- **継続的改善**: 使用状況に応じた段階的な適用拡大

### 知的生産性の最大化
- **完全DEF-A適用**: 戦略的・複雑な課題に限定
- **部分適用**: 日常的な技術質問での効率的対応
- **最小適用**: 緊急対応・バグ修正での迅速対応
- **学習支援適用**: 教育・理解での段階的支援
- **状況依存**: 質問内容・緊急度に応じた柔軟な調整
- **学習効果**: 段階的な習得による継続的成長

### 認知負荷管理の最適化
- **緊急対応**: 最小限の思考ステップで迅速解決
- **実装支援**: 実装に焦点を当てた効率的思考
- **学習支援**: 段階的理解を重視した教育的思考
- **戦略設計**: 包括的分析を重視した戦略的思考
- **プロセス改善**: 持続可能性を重視した改善思考

## [REFERENCE] 詳細参照
- **DEF-A詳細**: `defa_framework.cursorrules` を参照
- **プロンプトテンプレート**: `prompt_templates.cursorrules` を参照
- **適用例**: `core_rules.cursorrules` の基本フレームワークを参照 