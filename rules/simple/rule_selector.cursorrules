# Cursor Rules - Rule Selector
# Copyright (c) 2025 Kentaro Kitagawa
# MIT License - https://opensource.org/licenses/MIT

## [SELECTOR] 質問内容に応じたルール選択システム

### 質問分析フレームワーク

#### 技術領域判定キーワード
```
フロントエンド関連:
  - React, Vue, Angular, Svelte
  - TypeScript, JavaScript, HTML, CSS
  - コンポーネント, UI, UX, レスポンシブ
  - ブラウザ, DOM, イベント, 状態管理
  - パフォーマンス, バンドル, ビルド

バックエンド関連:
  - API, サーバー, データベース
  - Node.js, Python, Java, Go
  - PostgreSQL, MySQL, MongoDB, Redis
  - 認証, 認可, セキュリティ
  - マイクロサービス, アーキテクチャ

テスト関連:
  - テスト, TDD, BDD, ユニットテスト
  - Jest, Vitest, pytest, JUnit
  - E2E, 統合テスト, カバレッジ
  - 品質保証, レビュー, CI/CD
  - デバッグ, エラー, バグ修正

知識管理関連:
  - 暗黙知, 形式知, 知識共有, 学習
  - ベストプラクティス, ルール化, ドキュメント
  - チーム協働, メンタリング, ペアプログラミング
  - 継続的改善, フィードバック, スキル向上

全般・設計関連:
  - 設計, アーキテクチャ, パターン
  - 最適化, リファクタリング, 保守性
  - セキュリティ, パフォーマンス
  - デプロイメント, インフラ
  - プロジェクト管理, チーム開発

倫理的配慮関連:
  - 倫理, バイアス, 包摂性, 公平性
  - 人間性, 多様性, 共感, 相互学習
  - 文化的配慮, 社会的責任
  - ユーザビリティ, アクセシビリティ
```

#### 質問タイプ判定
```
実装・コーディング:
  - "実装", "コード", "作成", "開発"
  - "どう書く", "実装方法", "サンプル"
  - "エラー", "バグ", "修正", "デバッグ"

設計・アーキテクチャ:
  - "設計", "アーキテクチャ", "構造"
  - "パターン", "ベストプラクティス"
  - "選択", "比較", "どちらが良い"

テスト・品質:
  - "テスト", "品質", "検証"
  - "TDD", "BDD", "カバレッジ"
  - "レビュー", "改善", "最適化"

知識管理・学習:
  - "暗黙知", "形式知", "知識共有"
  - "学習", "教育", "メンタリング"
  - "ベストプラクティス", "ルール化"
  - "チーム協働", "共有", "継続的改善"

調査・学習:
  - "調べる", "調査", "学習"
  - "比較", "違い", "特徴"
  - "最新", "トレンド", "技術"

倫理的配慮:
  - "倫理", "バイアス", "包摂性", "公平性"
  - "人間性", "多様性", "共感", "相互学習"
  - "文化的配慮", "社会的責任"
  - "ユーザビリティ", "アクセシビリティ"
```

### ルール選択ロジック

#### 優先度付きルール適用
```
1. 技術領域判定 → 専門ルールファイル選択
2. 質問タイプ判定 → 適用レベル決定
3. 緊急度判定 → 複雑性調整
4. プロジェクト特性 → カスタマイズ適用
```

#### ルールファイル選択マトリックス
```
質問内容 → 適用ルール
├── フロントエンド技術 → frontend_rules.cursorrules
├── バックエンド技術 → backend_rules.cursorrules
├── テスト・品質 → testing_rules.cursorrules
├── 知識管理・学習 → knowledge_management_rules.cursorrules
├── 倫理的配慮 → ethics_core.cursorrules + ethics_monitoring.cursorrules
└── 全般・設計 → core_rules.cursorrules
```

### 動的ルール適用システム

#### 質問分析プロセス
```
🔍 [質問分析] 以下の観点で質問を分析します：
1. 技術領域: [フロントエンド/バックエンド/テスト/知識管理/倫理的配慮/全般]
2. 質問タイプ: [実装/設計/テスト/知識管理・学習/倫理的配慮/調査]
3. 緊急度: [緊急/通常/学習]
4. 複雑性: [高/中/低]
→ 適用ルール: [選択されたルールファイル]
```

#### ルール適用ログ
```
📋 [ルール適用] 以下のルールを適用します：
- 主要ルール: [frontend_rules.cursorrules]
- 補助ルール: [core_rules.cursorrules]
- 適用レベル: [基本/詳細/戦略]
- 複雑性調整: [簡潔/標準/詳細]
```

### 状況別ルール選択例

#### フロントエンド実装質問
```
質問: "Reactでユーザー登録フォームを作成したい"
分析:
- 技術領域: フロントエンド (React)
- 質問タイプ: 実装・コーディング
- 緊急度: 通常
- 複雑性: 中

適用ルール:
- 主要: frontend_rules.cursorrules
- 補助: core_rules.cursorrules
- レベル: 詳細
```

#### バックエンド設計質問
```
質問: "RESTful APIの設計パターンを教えて"
分析:
- 技術領域: バックエンド (API設計)
- 質問タイプ: 設計・アーキテクチャ
- 緊急度: 通常
- 複雑性: 高

適用ルール:
- 主要: backend_rules.cursorrules
- 補助: core_rules.cursorrules
- レベル: 戦略
```

#### テスト実装質問
```
質問: "Jestでユニットテストを書く方法"
分析:
- 技術領域: テスト (Jest)
- 質問タイプ: 実装・コーディング
- 緊急度: 通常
- 複雑性: 中

適用ルール:
- 主要: testing_rules.cursorrules
- 補助: core_rules.cursorrules
- レベル: 詳細
```

#### 知識管理・学習質問
```
質問: "プロジェクト固有のベストプラクティスをルール化したい"
分析:
- 技術領域: 知識管理
- 質問タイプ: 知識管理・学習
- 緊急度: 通常
- 複雑性: 中

適用ルール:
- 主要: knowledge_management_rules.cursorrules
- 補助: core_rules.cursorrules
- レベル: 詳細
```

### 複合質問への対応

#### フルスタック開発質問
```
質問: "ユーザー認証システムをフルスタックで実装したい"
分析:
- 技術領域: フロントエンド + バックエンド
- 質問タイプ: 実装・設計
- 緊急度: 通常
- 複雑性: 高

適用ルール:
- 主要: backend_rules.cursorrules (認証はバックエンド中心)
- 補助: frontend_rules.cursorrules + core_rules.cursorrules
- レベル: 戦略
```

#### 品質保証質問
```
質問: "プロジェクト全体の品質保証プロセスを設計したい"
分析:
- 技術領域: 全般 (品質保証)
- 質問タイプ: 設計・プロセス
- 緊急度: 通常
- 複雑性: 高

適用ルール:
- 主要: testing_rules.cursorrules
- 補助: core_rules.cursorrules
- レベル: 戦略
```

### 緊急度による調整

#### 緊急バグ修正
```
質問: "本番環境でエラーが発生している"
分析:
- 緊急度: 緊急
- 複雑性調整: 簡潔

適用ルール:
- 主要: 該当技術領域のルール
- 複雑性: 簡潔 (最小限の修正)
- 応答速度: 最優先
```

#### 学習・調査
```
質問: "最新のフロントエンド技術を調査したい"
分析:
- 緊急度: 低
- 複雑性調整: 詳細

適用ルール:
- 主要: frontend_rules.cursorrules
- 複雑性: 詳細 (包括的説明)
- 学習支援: 最優先
```

### プロジェクト特性の考慮

#### 個人開発プロジェクト
```
特性: 個人開発、学習目的
調整:
- 品質要求: 中程度
- テスト戦略: 基本レベル
- ドキュメント: 簡潔
```

#### チーム開発プロジェクト
```
特性: チーム開発、本番環境
調整:
- 品質要求: 高
- テスト戦略: 包括的
- ドキュメント: 詳細
- レビュープロセス: 必須
```

### ルール適用の最適化

#### 応答速度の最適化
- **質問分析**: 迅速なキーワード判定
- **ルール選択**: 最小限のルール適用
- **応答生成**: 効率的な情報提供

#### 品質の最適化
- **適切なルール選択**: 質問内容に最適化
- **包括的な考慮**: 関連技術の統合
- **実用性重視**: 即座実行可能な提案

#### 継続的改善
- **使用頻度分析**: よく使われるルールの特定
- **効果測定**: ルール適用の効果評価
- **ルール更新**: 新しい技術への対応 