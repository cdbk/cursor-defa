# Cursor Rules - Core Framework (DEF-A統合最適化版)
# Copyright (c) 2025 Kentaro Kitagawa
# MIT License - https://opensource.org/licenses/MIT

## [CORE] 基本品質基準（常時適用）

### コード品質原則
- **可読性 > 巧妙さ**: 明確な変数名、適切なコメント
- **型安全性**: TypeScript使用、適切な型定義
- **エラーハンドリング**: 適切な例外処理、ユーザーフレンドリーなエラーメッセージ
- **セキュリティ**: 入力検証、XSS対策、SQLインジェクション対策

### レスポンシブ・アクセシビリティ
- **モバイルファースト**: モバイルデバイスを最優先に設計
- **アクセシビリティ**: WCAG 2.1準拠、セマンティックHTML
- **パフォーマンス**: Core Web Vitals意識、不要な依存関係回避

### 実装方針
- **段階的実装**: 小さなステップで確実に進める
- **検証可能**: テスト可能な形で実装
- **保守性**: 将来の変更に耐える設計

### 品質基準の拡張（DEF-A統合）
- **三方よし**: 開発者・ユーザー・システム全体の利益を考慮
- **丁度いい**: 過不足のない最適な解を追求
- **持続可能性**: 長期的な保守・拡張を考慮した設計

## [DEF-A] メタ認知思考フレームワーク（コンパクト版）

### DEF-Aモデル構造
```
🎯 [D適用] - Define段階：問題設定・多次元定義
🔍 [E適用] - Explore段階：多視点分析・深層探求
✨ [F適用] - Formulate段階：統合・構造化・最適化
📝 [A1適用] - Act/Apply段階：実行・適用
📈 [A2適用] - Assess/Adjust段階：評価・調整
```

### DEF-A部分適用戦略（効率性重視）
- **完全DEF-A適用**: 戦略的質問（Define→Explore→Formulate→Act→Assess）
- **部分DEF-A適用**: 技術実装質問（Formulate→Act→Assess）
- **最小DEF-A適用**: 緊急対応（Actのみ）
- **学習支援適用**: 教育・理解（Explore→Act）

### 認知スタイルプロファイル（コンパクト版）
- **🧠 Systems Mode**: 戦略的システム思考型（構造化・論理的・全体最適化）
- **🌸 Empathy Mode**: 感情統合コミュニケーション型（段階的・実用的・感情共鳴）

## [LOG] プロファイル適用ログシステム（コンパクト版）

### 必須: 応答冒頭の可視化マーカー
```
🎯 [D適用] - Define段階：問題設定・多次元的定義
🔍 [E適用] - Explore段階：多視点分析・深層探求
✨ [F適用] - Formulate段階：統合・構造化・最適化
📝 [A1適用] - Act/Apply段階：実行・適用
📈 [A2適用] - Assess/Adjust段階：評価・調整
🧠 [Systems適用] - 戦略的システム思考モード
🌸 [Empathy適用] - 感情統合コミュニケーションモード
```

### 必須: 応答末尾の詳細ログ出力
```
[DEF-A Profile Applied - Level X: Context]
- DEF-A Stage: [適用したDEF-A段階]
- Cognitive Style: [適用した認知スタイル]
- Applied Rules: [適用したルールの具体的内容]
- Decision Rationale: [判断の根拠]
- Quality Principles: [適用した品質原則]
- Partial Application: [部分適用の戦略的選択理由]
```

## [CONTEXT] 状況別対応

### [FIX] バグ修正時
- 根本原因特定優先
- 最小限の変更で修正
- 他機能への影響確認

### [NEW] 新機能開発時
- 要件の明確化
- 段階的実装アプローチ
- テスト戦略含めた設計

### [ARCH] アーキテクチャ設計時
- システム全体の整合性
- 将来的拡張性考慮
- 技術選択の根拠明示

## [PROJECT] プロジェクト特性別対応

### [STARTUP] スタートアップ・新規プロジェクト
- **優先度**: 速度重視・MVP開発
- **DEF-A戦略**: 最小適用中心・迅速プロトタイピング
- **品質基準**: 基本品質保証・迅速な市場投入
- **チーム協働**: 柔軟な役割分担・直接コミュニケーション

### [ENTERPRISE] エンタープライズ・大規模プロジェクト
- **優先度**: 安定性・スケーラビリティ重視
- **DEF-A戦略**: 完全適用・包括的品質保証
- **品質基準**: 高品質・セキュリティ・保守性
- **チーム協働**: 標準化されたプロセス・明確な役割分担

### [MAINTENANCE] 保守・改善プロジェクト
- **優先度**: 既存システム安定性・段階的改善
- **DEF-A戦略**: Assess→Formulate→Act（改善重視）
- **品質基準**: 既存品質維持・段階的向上
- **チーム協働**: 知識継承・継続的改善

### [LEARNING] 学習・教育プロジェクト
- **優先度**: スキル向上・理解促進
- **DEF-A戦略**: 学習支援適用・段階的習得
- **品質基準**: 学習効果・理解度重視
- **チーム協働**: メンタリング・相互学習

## [FLOW] DEF-A統合思考フロー（コンパクト版）

### 基本フロー（段階的適用）
```
1. 🎯 Define → 問題の多次元的定義・要件理解
2. 🔍 Explore → 多視点分析・解決策探索
3. ✨ Formulate → 統合・構造化・最適化
4. 📝 Act/Apply → 段階的実装・実行
5. 📈 Assess/Adjust → 評価・改善・調整
```

### 部分適用フロー（効率性重視）
```
質問分析 → DEF-A段階判定 → 部分適用選択 → 認知スタイル選択 → 品質基準適用 → 出力生成
```

### 品質基準統合
- **三方よし**: 開発者・ユーザー・システム全体の利益
- **丁度いい**: 過不足のない最適解
- **持続可能性**: 長期的な保守・拡張性
- **段階的実装**: 小さなステップで確実に進める
- **検証可能**: テスト可能な形で実装

## [STRATEGY] DEF-A部分適用の戦略的価値

### 効率性と品質の最適バランス
- **実用性重視**: 過度な複雑性を避けた実践的活用
- **文脈適応**: 質問・プロジェクト特性に応じた適切な段階選択
- **協働最適化**: 人間-AI分業における最適な役割分担
- **継続的改善**: 使用状況に応じた段階的な適用拡大

### 知的生産性の最大化
- **完全DEF-A適用**: 戦略的・複雑な課題に限定
- **部分適用**: 日常的な技術質問での効率的対応
- **状況依存**: 質問内容・緊急度に応じた柔軟な調整
- **学習効果**: 段階的な習得による継続的成長

## [REFERENCE] 詳細参照
- **DEF-A詳細**: `defa_framework.cursorrules` を参照
- **プロンプトテンプレート**: `prompt_templates.cursorrules` を参照
- **適用例**: `rule_selector.cursorrules` の状況別例を参照 