# プロンプト詳細例集

## 状況別プロンプト例

### 1. 戦略設計質問（完全DEF-A適用）
```markdown
# React アプリのアーキテクチャ設計戦略

## [CONTEXT] 開発状況
- **プロジェクト**: 中規模SaaSアプリケーション
- **開発段階**: アーキテクチャ設計
- **緊急度**: 通常
- **チーム規模**: 5名
- **プロジェクト特性**: エンタープライズ（安定性・スケーラビリティ重視）

## [REQUEST] 具体的要求
スケーラブルで保守性の高いReactアプリケーションのアーキテクチャを設計したい。
状態管理、コンポーネント設計、ディレクトリ構造を統合的に検討したい。

## [DEF-A] 思考フロー指定
- **適用段階**: Define → Explore → Formulate → Act → Assess（完全適用）
- **適用戦略**: 完全適用（戦略的重要性）
- **認知スタイル**: Systems思考重視（システム全体最適化）
- **複雑性レベル**: 詳細

## [RULES] 適用ルール
- **主要ルール**: frontend_rules.cursorrules
- **補助ルール**: core_rules.cursorrules
- **品質基準**: 三方よし（開発者・ユーザー・システム全体）
- **出力形式**: 設計書 + 実装ガイド
- **部分適用理由**: 戦略的重要性（完全分析が必要）
```

### 2. 技術実装質問（部分DEF-A適用）
```markdown
# TypeScript 型安全なAPIクライアント実装

## [CONTEXT] 開発状況
- **プロジェクト**: 既存Reactアプリケーション
- **開発段階**: 機能追加実装
- **緊急度**: 通常
- **チーム規模**: 個人
- **プロジェクト特性**: 保守・改善（既存システム安定性・段階的改善）

## [REQUEST] 具体的要求
REST APIとの通信を行う型安全なAPIクライアントを実装したい。
エラーハンドリングとローディング状態管理も含めたい。

## [DEF-A] 思考フロー指定
- **適用段階**: Formulate → Act → Assess（実装重視）
- **適用戦略**: 部分適用（実装重視）
- **認知スタイル**: Systems思考重視（型安全性・構造化）
- **複雑性レベル**: 標準

## [RULES] 適用ルール
- **主要ルール**: frontend_rules.cursorrules
- **補助ルール**: core_rules.cursorrules
- **品質基準**: 丁度いい（過不足のない実装）
- **出力形式**: 実装コード + 使用例
- **部分適用理由**: 効率性（実装に焦点）
```

### 3. 緊急バグ修正（最小DEF-A適用）
```markdown
# 本番環境 React アプリクラッシュ緊急修正

## [CONTEXT] 開発状況
- **プロジェクト**: 本番稼働中のWebアプリ
- **開発段階**: 緊急バグ修正
- **緊急度**: 緊急
- **チーム規模**: 小規模
- **プロジェクト特性**: 保守・改善（既存システム安定性・段階的改善）

## [REQUEST] 具体的要求
ユーザーの特定操作でアプリがクラッシュしている。
エラーログ: [エラー内容]
最小限の修正で素早く解決したい。

## [DEF-A] 思考フロー指定
- **適用段階**: Act（緊急対応実装のみ）
- **適用戦略**: 最小適用（緊急対応）
- **認知スタイル**: Systems思考重視（効率的・論理的解決）
- **複雑性レベル**: 簡潔

## [RULES] 適用ルール
- **主要ルール**: frontend_rules.cursorrules
- **品質基準**: 最小限の安全な修正
- **出力形式**: 修正コード + 緊急デプロイ手順
- **部分適用理由**: 緊急度（応答速度最優先）
```

### 4. 学習・理解質問（学習支援適用）
```markdown
# TDD開発手法の学習・理解

## [CONTEXT] 開発状況
- **プロジェクト**: 個人学習・技術習得
- **開発段階**: 学習・理解
- **緊急度**: 低
- **チーム規模**: 個人
- **プロジェクト特性**: 学習・教育（スキル向上・理解促進）

## [REQUEST] 具体的要求
TDD（テスト駆動開発）の基本的な考え方と実践方法を段階的に学習したい。
Reactコンポーネントでの具体例も含めて理解したい。

## [DEF-A] 思考フロー指定
- **適用段階**: Explore → Act（学習・実践）
- **適用戦略**: 学習支援適用（教育・理解）
- **認知スタイル**: Empathy共感重視（段階的説明・学習支援）
- **複雑性レベル**: 詳細

## [RULES] 適用ルール
- **主要ルール**: testing_rules.cursorrules
- **補助ルール**: core_rules.cursorrules
- **品質基準**: 段階的理解・実践しやすさ
- **出力形式**: チュートリアル + 実習課題
- **部分適用理由**: 学習支援（段階的理解重視）
```

### 5. エラー処理質問（エラー処理統合適用）
```markdown
# 本番環境でのデータベース接続エラー対応

## [CONTEXT] 開発状況
- **プロジェクト**: 本番稼働中のWebアプリケーション
- **開発段階**: エラー対応・改善
- **緊急度**: 緊急
- **チーム規模**: 中規模
- **プロジェクト特性**: エンタープライズ（安定性・スケーラビリティ重視）

## [REQUEST] 具体的要求
本番環境でデータベース接続エラーが頻発している。
エラーログ: [詳細ログ]
根本原因の特定と再発防止策を含めた包括的対応をしたい。

## [DEF-A] 思考フロー指定
- **適用段階**: Define → Explore → Formulate → Act → Assess（完全適用）
- **適用戦略**: 完全適用（システム安定性の重要性）
- **認知スタイル**: Systems思考重視（システム全体最適化）
- **複雑性レベル**: 詳細

## [RULES] 適用ルール
- **主要ルール**: error_handling_rules.cursorrules
- **補助ルール**: backend_rules.cursorrules + core_rules.cursorrules
- **品質基準**: 三方よし + システム安定性重視
- **出力形式**: 分析結果 + 修正コード + 監視強化
- **部分適用理由**: 戦略的重要性（包括的対応が必要）
```

### 6. チーム協働質問（チーム協働統合適用）
```markdown
# 新規メンバーのオンボーディング・メンタリング

## [CONTEXT] 開発状況
- **プロジェクト**: 中規模Webアプリケーション開発
- **開発段階**: チーム拡大・スキル向上
- **緊急度**: 通常
- **チーム規模**: 中規模（新規メンバー追加）
- **プロジェクト特性**: エンタープライズ（安定性・スケーラビリティ重視）

## [REQUEST] 具体的要求
新規メンバー（React初心者）のオンボーディングを効率的に行いたい。
段階的な学習計画とメンタリング戦略を設計したい。

## [DEF-A] 思考フロー指定
- **適用段階**: Explore → Formulate → Act（学習・実践重視）
- **適用戦略**: 学習支援適用（教育・理解）
- **認知スタイル**: Empathy共感重視（段階的説明・学習支援）
- **複雑性レベル**: 詳細

## [RULES] 適用ルール
- **主要ルール**: team_collaboration_rules.cursorrules
- **補助ルール**: frontend_rules.cursorrules + core_rules.cursorrules
- **品質基準**: 学習効果・理解度重視
- **出力形式**: 学習計画 + メンタリングガイド + 評価指標
- **部分適用理由**: 学習支援（段階的理解重視）
``` 